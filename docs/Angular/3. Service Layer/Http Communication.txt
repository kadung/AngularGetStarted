Ref:
    1.

----------------------------------------------------------------------------------------------------
    Retrieving Data Using HTTP
    https://gist.github.com/staltz/868e7e9bc2a7b8c1f754
----------------------------------------------------------------------------------------------------
+ In Angular, we can structure our application to use Observables (Observer pattern) as the backbone
of our data architecture. Using Observables to structure our data is called Reactive Programming.

+ Reactive programming is programming with asynchronous data streams. A stream is a sequence of on-
going events ordered in time, it can emit three different things: a value (of some type), an error,
or a "completed" signal. We capture these emitted events only asynchronously, by defining a function
that will execute when a value is emitted, another function when an error is emitted, and another
function when 'completed' is emitted.

+ The "listening" to the stream is called Observers. The "emitting" of the stream is called subject
(or Observable).

+ Step to send and retrieve via HTTP request:
    1. Register service class and HttpClientModule with Angular injector so we can inject our service
    and HTTP service to any class that need.
        - Add service class to declarations array in App Module (app.module.ts)
        - Add HttpClientModule from @angular/common/http to imports array in App Module (app.module.ts)

    2. Build service to wrap HTTP request:
        - Inject http as dependency to service class via constructor so Angular provides an instance of
        the HTTP client service
        - Create a method for each HTTP request, call the desired HTTP method (get, post, delete,
        ...) in the method and pass the URL to the server.
        - Use generic (<IProduct[]>) to specific the return data type of HTTP request
        - For example:
            import HttpClient from '@angular/common/http'
            export class ProductServive{
                constructor(private http: HttpClientModule) {}
                getProduct(): Observable<IProduct[]>{
                    return this.http.get<IProduct[]>(this.productURL);
                }

    3. There are two keys Observable operator to handle exception (invalid request, lost connection
    to backend, ...):
        - Tap: allows us to look at the emitted value in the stream without transforming the stream,
        it uses for debugging or logging
        - CatchError: catch the error
        - To use these operator, we access the pipe method of the observable, for example:
            import { catchError, tap } from 'rxjs/operators'
            ...
            getProduct(): Observable<IProduct[]>{
                return this.http.get<IProduct>(this.productURL).pipe(
                    tap(data => console.log('All: ' + JSON.stringify(data))),
                    catchError(this.handleError)
                );
            }
            private handleError(err: HttpErrorResponse){ ... }

    4. Subscribing to an Observable:
        - Observable are lazy, an Observable doesn't start emitting value until Subscribe is called.
        - Subscribe method takes upto 3 agruments: x.subscribe(nextFn, errorFn, completeFN)
            - nextFn: since Observable handles multiple value over time, the next function is called
            for each value the Observable emits
            - errorFn: error handler function, it executes when there is an error
            - completeFN: this function is executed when Observable completes the emit
        - The subscribe function return a subscription, we could use that subscription to call unsubscribe
        and cancel subscription if need
        - For example, below code call getProducts method in productService to send HTTP GET request, then
        it sets up to asynchronously receive data and notifications from the Observable
            ....
            this.productService.getProducts().subscribe(
                products => this.product      = products,
                error    => this.errorMessage = <any>error
            )
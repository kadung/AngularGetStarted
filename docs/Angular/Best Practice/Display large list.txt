Ref:
    1. https://angular.io/guide/template-syntax#ngfor-with-trackby

----------------------------------------------------------------------------------------------------
    *ngFor with trackBy
----------------------------------------------------------------------------------------------------
+ If you use NgFor with large lists, a small change to one item, such as removing or adding an item, 
can trigger a cascade of DOM manipulations. For example, re-querying the server could reset a list 
with all new item objects, even when those items were previously displayed. In this case, Angular 
sees only a fresh list of new object references and has no choice but to replace the old DOM 
elements with all new DOM elements.


+ You can make this more efficient with trackBy. Add a method to the component that returns the 
value NgFor should track. In this case, that value is the hero's id. If the id has already been 
rendered, Angular keeps track of it and doesn't re-query the server for the same id.

// src/app/app.component.ts
trackByItems(index: number, item: Item): number { return item.id; }

// src/app/app.component.html
<div *ngFor="let item of items; trackBy: trackByItems">
  ({{item.id}}) {{item.name}}
</div>
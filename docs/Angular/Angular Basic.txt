- Ref:
    1. 

----------------------------------------------------------------------------------------------------
    Overview
----------------------------------------------------------------------------------------------------
+ In our Angular apps, we write HTML markup that becomes our interactive application, but browser 
only understands a limited set of markup tags, for example <b>, <select>, <form>, ... and all have 
functionality defined by our browser creator.

+ What if we want to teach the browser new tags? What if we wanted to have a <weather> tag that
shows the weather? Or what if we want to create a <login> tag that shows a login panel? This is the 
fundamental idea behind components: we will teach browser new tags that have custom functionality 
attached to them. 


----------------------------------------------------------------------------------------------------
    Angular Component
----------------------------------------------------------------------------------------------------
+ Angular Component includes 2 parts:
    1. Template: 
        - It creates with HTML and CSS (app.component.css and app.component.html).
        - It defines a view layout for this component.
        - It includes data binding and directives.
    2. Class: 
        - It creates with TypeScript (app.component.test).
        - It is the code supporting the view which contains:
            . Properties or data element in the view 
            . Methods which are the functions for the logic needed by the view
        - It contains metadata which defines additional data for the component:
            . HTML tag name for component
            . Which class and template are associated in this component

+ A class becomes an Angular component when it has the component metadata. Angular needs that 
metadata to understand how to instantiate the component.

+ Component's metadata is defined with the Angular component function. In TypeScript, component
function is attached to the class as a decorator .
    
+ A decorator is a function that add metadata to a class, its member or its method agruments. A 
decorator is always prefix with @ sign.

+ For example, app.component.ts has below code:
    // Before we use an external function or class, we define where to find it. Since we use @Component
    // decorator, we have import the module which contains this function
    import { Component } from '@angular/core';

    // Component decorator identify the class as Angular component. Since decorator is a function, we 
    // always add parentheses. We also pass an object to component function as indicated with the curly 
    // brace, this object has many properties but we only use 2 properties in this example
    @Component({     
        // Define the component's directive name (custom HTML tag name of this component). 
        selector: 'pm-root',
        // Whenever this component's directive name is used in any HTML, Angular renders this component
        // template which located as below
        templateUrl: './app.component.html',
        styleUrls: ['./app.component.css']
    })

    // Define Angular component using Class and export this class so other Angular module can also 
    // use it by import this class.
    // Name of the class is also the name of this Angular component 
    export class AppComponent {
        title = 'Angular: Getting Started';
    }


----------------------------------------------------------------------------------------------------
    Angular Module
----------------------------------------------------------------------------------------------------
+ Angular module helps to organize Angular application into cohesive blocks of functionality and
provide boudaries in Angular application.

+ Angular module provides a template resolution environment which means that when Angular compiler 
see a directive in a template, it look to the Angular module for the definition. So we delare our 
Angular component in am Angular module so that the compiler can find it.

+ We also use Angular module to Bootstrap our startup component.

+ For example, app.module.ts has below code:
    import { BrowserModule } from '@angular/platform-browser';
    import { NgModule } from '@angular/core';
    import { AppComponent } from './app.component';

    // NgModule decorator identify the class as Angular module. For the NgModule decorator, the
    // properties are arrays
    @NgModule({
        // Delare your custom components which you want to use in this application, then all
        // components see and use
        declarations: [ AppComponent ],

        // Add Angular modules or 3rd party modules which we want to use to your application then
        // components see and use
        // BrowserModule must be imported.
        imports: [ BrowserModule ],

        // bootstrap array defines the startup component of the application. The startup component
        // should contains the selector which we use in root index.html
        bootstrap: [AppComponent]
    })

    // Define Angular module using Class and export this class so other Angular module can also 
    // use it by import this class.
    export class AppModule { }
    

----------------------------------------------------------------------------------------------------
    Templates
----------------------------------------------------------------------------------------------------
+ HTML
+ CSS library: bootstrap, saas, awesome font,...


----------------------------------------------------------------------------------------------------
    Data Binding
----------------------------------------------------------------------------------------------------
+ Binding cordinates communication between the component's class and its template. Data binding has
two type:
    - One-Way Data-Binding
    - Two-Way Data-Binding

+ Interpolation:
    - It is identified with an template expression in the middle of double curly brace
    - It is is One-Way Data-Binding from component's class property to template. 
    - It supports multiple:
        - Binding simple property:
            <h1>{{pageTitle}}</h1>
        - Concatenation:
            <h1>{{"Title is " + pageTitle}}</h1>
        - Simple caculation:
            <h1>{{10 + 20}}</h1>
        - Call a class method:
            <h1>{{"Title is " + getpageTitle()}}</h1>
        - Element property assignment:
            <h1 innerText = {{pageTitle}}></h1>

+ Property binding:
    - It sets a property/attribute of an element to the value of a template expression. When setting 
    an element property to a non-string data value, you must use property binding.
    - It is identified with element property/attribute in square brackets.
    - It is is One-Way Data-Binding from component's class property to template. 
    - Example:
        <img [src] = 'product.imageUrl'>       // Equals to <img src = {{product.imageUrl}}>

+ Event binding:
    - It is the response for any DOM events which are trigger by user action such as clicking a link, 
    pushing a button, or entering text.
    - List of DOM event: https://developer.mozilla.org/en-US/docs/Web/Events 
    - It is is One-Way Data-Binding from template to component's class property. 
    - To bind to a DOM event, surround the DOM event name in parentheses and assign a quoted template 
    statement to it.
        <button (click) = "onClickMe()"> Click me! </button>    // (click): DOM event 

+ Two way data biding:
    - It is achieved by enclosing ngModel directive in square brackets then parentheses. Square 
    brackets indicates property binding from the class property and Parentheses indicates event 
    binding which send notification of the user action back to the class property. Then we assign 
    this to a template property which we want 2 way data binding on.
        [(ngModel)] = "listProperty";
    - ngModel locates in FormsModule in @angular/forms, so remember to include this in your module:
        import {FormsModule} from '@angular/forms';
        ...
        imports: [
            BrowserModule,
            FormsModule
        ]

---------------------------------------------------------------------------------------------------
    Directive
---------------------------------------------------------------------------------------------------
+ Angular directive allows us to extend HTML. Angular directive includes:
    1. Custom directive:
        - It is custome HTML element (Angular component).
    
    2. Build-in directive:
        a. Structural Directives:
            - It is Angular custom HTML attribute which provides if and for logic which locate
            inside BrowserModule package.
            - It is used to change the DOM layout by adding, removing or manipulating DOM elements.
            - It is delared with an asterisk (*) precedes the directive attribute.
                . *ngIf: if logic. Note: Element is removed from the DOM if condition is false value
                . *ngFor: for logic repeats a portion of DOM tree once for each item in an iterable
                list. 
        
        b. Attribute Directives:
            - It is a HTML attribute which responds for HTML style.
            - It changes the appearance or behavior of an element, component, or another directive.

+ Structural and Attribute directives must be declared in Angular Modules same as component.


---------------------------------------------------------------------------------------------------
    Transform data with Pipe
---------------------------------------------------------------------------------------------------
+ A pipe takes in data as input and transforms it to a desired output. Example, the date pile:
    <p>My birthday is {{birthday_variable | date }}     

+ A pile can has no or multiple parameters:
    <p>Total cost is {{cost | curency:'USD':'symbol':'1.2-2'}}

+ Pile can be chained together. Example, to display the birthday in uppercase, the birthday is 
chained to the DatePipe and on to the UpperCasePipe:
    <p>My birthday is {{birthday_variable | date:'fullDate' | uppercase}}     

+ Angular build-in pipes: https://angular.io/api?type=pipe


+ You can write your own custom pipes: https://angular.io/guide/pipes#custom-pipes

---------------------------------------------------------------------------------------------------
    Component Lifecycle Hooks
---------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------
    
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
    
---------------------------------------------------------------------------------------------------
Ref:
    1. 

----------------------------------------------------------------------------------------------------
    Routing in Angular
----------------------------------------------------------------------------------------------------
+ Angular appllication is single page application. That means all of our views are displayed in one 
page, normally defined in index.html. So routing manages when and which view to display in the single
page at that time.

+ Angular appllication has one router that is managed by Angular router service, it is RouterModule
from @angular/router

+ How routing works:
    - Routing is component based so we identify the set of components that we want to provide as 
    routing target and define a route for each one.
    - Define option(hyperlink, picture , ...) or action (button click, ...) that allow the user to 
    select the view to display.
    - Tie that route to each option/action so when user select the option or perform the action, the 
    associated route is activated and the view of that component is displayed.


----------------------------------------------------------------------------------------------------
    Configuring Routes
----------------------------------------------------------------------------------------------------
+ Define a base element with base tag in index.html file of root app folder. This element tells the 
router how to compose the navigation URLs:
    <base href="/">

+ Register route service by adding RouterModule to import array in app.module.ts as:
    imports: [
        // [] is the array of root routes of our application
        // Set useHash: true if use hash style routes instead of HTML5 style routes
        RouterModule.forRoot([], {useHash: false})
    ]

+ Add route definition in routes array of RouterModule, each route requires a path and an associated 
component:
    - A path defines the URL path segment, when the route is activated, this URL path segment is 
    appended to the URL of the application (No need to use leading splash in path segment)
    - Associated component's template is displayed when the route is activated
    - The route will be matched from the top to the botom the route array, so we should put the 
    general routes at the bootom of the routes array.
    - Example:
        [
            // Match URL myWeb.com/welcome to display welcome component template
            { path: 'welcome', component: WelcomeComponent },
            // :id is parameter of the route
            { path: 'products/:id', component: ProductDetailComponent },
            // Define default route, redirect to myWeb.com/welcome
            { path: '', redirectTo: 'welcome', pathMatch: 'full' },
            // Define wildcard route, if no route matchs then display Page Not Found 
            { path: '**', component: PageNotFoundComponent}
        ]

+ Tie routes to actions:
    - Add the RouterLink directive as an attribute to any clickable element int he component's
    template (menu action, toolbar, button, ...)
    - Ensure the router link in square brackets, bind the router link to a linked parameter array
        - First element of the link parameter array is the route's path.
        - All other element after first element are route parameter.
    - Use the RouterOutlet to identify where to displayed the routed component's view when that
    route is activated
    - Example:
        <div style="text-align:center">
            <ul>
                <li><a href="#">{{title}}</a></li>
                <li><a [routerLink]="['/welcome']">Welcome</a></li>
                <li><a [routerLink]="['/products']">Products</a></li>
            </ul>
        </div>
        <div class="container">
            <router-outlet></router-outlet>
        </div>


----------------------------------------------------------------------------------------------------
    Passing parameter to a route
----------------------------------------------------------------------------------------------------
+ Configure the route with parameter in module.app.ts file using a slash, a colon and a placeholder 
for the parameter. If multiple parameter are need, we repeat that syntax:
    { path: 'products/:id', component: ProductDetailComponent }
    { path: 'products/:category/:id', component: SomeComponent }
    { path: 'products/:userid/:companyid/:productid', component: SomeComponent }

+ Passing parameters to a route by adding second agrument in routerLink:
    <a [routerLink] = "['/products', product.productId]">
        {{product.name}}
    </a>

+ To reading parameter from a route (URL), we use the ActivatedRoute service:
    // Component which need to read the URL
    import { ActivatedRoute } from '@angular/router'
    ...
        constructor(private route: ActivatedRoute){
            console.log(this.route.snapshot.paramMap.get('id');
        }

----------------------------------------------------------------------------------------------------
    Activate route with code
----------------------------------------------------------------------------------------------------
+ When do you need to activate route with code instead of routerLink:
    - When you need to execute some code to modify the data then route. Example Save button saves
    the data before do routing to next page.

+ To route with code, we use Router service.
    import { Router } from '@angular/router'
    ...
        constructor (private router: Router) { }
        onBack(): void{
            this.router.navigate([/products]);
        }

----------------------------------------------------------------------------------------------------
    Protecting routes with Guards
----------------------------------------------------------------------------------------------------
+ Guards uses to limit access of a route, for example:
    - A route is only accessible to specific user, such as administrator.
    - Ask user to confirm a navigation operation, such as asking whether to save before navigating 
    away from an edit page.

+ Angular router provides several guards, including:
    - CanActivate: to guard navigation to a route
    - CanDeactivate: to guard navigation away from the current route route
    - Resolve: to re-fetch data before activating a route 
    - CanLoad: to prevent async routing 

+ Building a guard:
    - Below are manual steps to build CanActivate guard which prevents navigation to a route unless 
    a specific condition is true. Other guards can be builded in a similar way by implement that 
    guard interface.
        import { Injectable } from '@angular/core'
        import { CanActivate } from '@angular/router'
        // Implementing a guard as a service so we can inject to component class
        @Injectable({
            providedIn: 'root'
        })
        // Define a guard class and implement it to a specific guard interface
        export class ProductDetailGuard implements CanActivate {
            // ActivatedRouteSnapshot contains the current route information at any particular
            // moment in time
            // RouterStateSnapshot contains router state information
            canActivate(
                next: ActivatedRouteSnapshot,
                state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
                    // The URL abc.com/products/10 contains 2 segment products and 10 (id)
                    // We can take the id as below
                    let id = +next.url[1].path;
                    if (isNaN(id) || id < 1){
                        ...
                    }
            }
        }
    - Or we can create a guard via Angular CLI with below syntax:
        // ng g g Full_path_name_of_the_guard
        ng g g products/product-detail      

+ Using a guard:
    - Add guard class into the route path in app.module.ts
        RouterModule.forRoot([
            { path: 'products/:id', canActivate: [ComponentGuardClass], component: [ComponentClass] }
        ])

----------------------------------------------------------------------------------------------------
    Lazy loading
----------------------------------------------------------------------------------------------------
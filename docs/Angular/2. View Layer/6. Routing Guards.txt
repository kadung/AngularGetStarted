Ref:
    1.

----------------------------------------------------------------------------------------------------
    Protecting routes with Guards
----------------------------------------------------------------------------------------------------
+ Guards uses to limit access of a route, for example:
    - A route is only accessible to specific user, such as administrator.
    - Ask user to confirm a navigation operation, such as asking whether to save before navigating
    away from an edit page.

+ Angular router provides several guards, including:
    - CanActivate: to guard navigation to a route
    - CanDeactivate: to guard navigation away from the current route
    - Resolve: to re-fetch data before activating a route
    - CanLoad: to prevent async routing

- We can create a guard via Angular CLI with below syntax:
    ng g g Full_path_name_of_the_guard      // ng g g products/product-detail


----------------------------------------------------------------------------------------------------
    Protecting Routes with canActivate
----------------------------------------------------------------------------------------------------
+ CanActivate guard prevents navigation to a route unless a specific condition is true.

+ Example:
    import { Injectable } from '@angular/core'
    import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router'
    // Register a guard as a service to root injector so we can inject to any component
    @Injectable({
        providedIn: 'root'
    })
    // Define a guard class and implement it to a specific guard interface
    export class AuthGuard implements CanActivate {
        // ActivatedRouteSnapshot contains the current route information
        // RouterStateSnapshot contains router state information
        canActivate(next: ActivatedRouteSnapshot,
                    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
            this.authService.isAuthenticated()
                .then((authen: boolean) => {
                    return authen ? : ;
                })
        }
    }

+ Using a guard: Add guard class into the route path in app.module.ts
    RouterModule.forRoot([
        { path: 'products/:id', canActivate: [ComponentGuardClass], component: [ComponentClass] }
    ])


----------------------------------------------------------------------------------------------------
    Protecting Child Routes with CanActivateChild
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
    Confirm action when user leaves the current route with CanDeactivate
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
    Resolving Dynamic Data with the Resolve
----------------------------------------------------------------------------------------------------
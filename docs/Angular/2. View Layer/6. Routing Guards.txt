Ref:
    1.

----------------------------------------------------------------------------------------------------
    Protecting routes with Guards
----------------------------------------------------------------------------------------------------
+ Guards is a service which uses to limit access of a route, for example:
    - A route is only accessible to specific user, such as administrator.
    - Ask user to confirm a navigation operation, such as asking whether to save before navigating
    away from an edit page.

+ Angular router provides several guards, including:
    - CanActivate: guards navigation to a route
    - CanDeactivate: guards navigation away from the current route
    - Resolve: pre-fetches data before activating a route
    - CanLoad: prevent async routing

- We can create a guard via Angular CLI with below syntax:
    ng g g Full_path_name_of_the_guard      // ng g g products/product-detail


----------------------------------------------------------------------------------------------------
    Protecting Routes with canActivate
----------------------------------------------------------------------------------------------------
+ CanActivate guard prevents navigation to a route unless it returns true.

+ Create new service as can-activate.guard.ts:
    @Injectable()
    export class AuthGuard implements CanActivate {
        constructor(private router: Router,
                    private authService: AuthService) {}
        // ActivatedRouteSnapshot contains the current route information
        // RouterStateSnapshot contains router state information
        canActivate(currentRoute: ActivatedRouteSnapshot,
                    currentState: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
            return this.authService.isAuthenticated().then(
                (authenticated: boolean) => {
                    if (authenticated) return true;
                    this.route.navigate(['/]);
                })
        }
    }

+ To use new service guard:
    - Register new service to Angular dependency injector (See Services & DI.txt).
    - Add new service class into canActivate property of the route which should be protected.
    Note: This guard will be applied to all child routes of this route automatically.
        RouterModule.forRoot([
            { path: 'products', canActivate: [AuthGuard], component: ProductsComponent, children: [
                { path: ':id', component: ProductDetailComponent },
                { path: ':id/edit', component: ProductEditComponent },
            ]},
        ])


----------------------------------------------------------------------------------------------------
    Only Protecting Child Routes with CanActivateChild
----------------------------------------------------------------------------------------------------
+ We can combine both canActivate and CanActivateChild in a same guard:
    @Injectable()
    export class AuthGuard implements CanActivate {
        constructor(private router: Router,
                    private authService: AuthService) {}
        // ActivatedRouteSnapshot contains the current route information
        // RouterStateSnapshot contains router state information
        canActivate(currentRoute: ActivatedRouteSnapshot,
                    currentState: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
            return this.authService.isAuthenticated().then(
                (authenticated: boolean) => {
                    if (authenticated) return true;
                    this.route.navigate(['/]);
                })
        }
        canActivateChild(currentRoute: ActivatedRouteSnapshot,
                    currentState: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
            return this.canActivate(currentRoute, currentState);
        }
    }

+ To use new service guard:
    - Register new service to Angular dependency injector (See Services & DI.txt).
    - Add new service class into canActivateChild property of the route which needs to protect its
    child routes only:
        RouterModule.forRoot([
            {
                path: 'products',
                component: ProductsComponent,
                canActivateChild: [AuthChildGuard],
                children: [
                    { path: ':id', component: ProductDetailComponent },
                    { path: ':id/edit', component: ProductEditComponent },
                ]
            },
            ...
        ])


----------------------------------------------------------------------------------------------------
    Confirm action when user leaves the current route with CanDeactivate
----------------------------------------------------------------------------------------------------
+ canDeactivate guard prevents user to navigate out the current URL unless it returns true.

+ Create new guard as can-deactivate.guard.ts:
    export interface CanComponentDeactivate {
        canDeactivate(): Observable<boolean> | Promise<boolean> | boolean;
    }
    export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {
        canDeactivate(component: CanComponentDeactivate,
                      currentRoute: ActivatedRouteSnapshot,
                      currentState: RouterStateSnapshot,
                      nextState?: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
            return component.canDeactivate();
        }
    }

+ To use new guard:
    - Register new service to Angular dependency injector (See Services & DI.txt).
    - Add new service class into canDeactivate property of the route which requires the confirm
    action:
        RouterModule.forRoot([
            { path: 'products', canActivate: [AuthGuard], component: ProductsComponent, children: [
                { path: ':id', component: ProductDetailComponent },
                { path: ':id/edit', component: ProductEditComponent, canDeactivate: [CanDeactivateGuard] },
            ]},
        ])
    - Implements canDeactivate method in the component class which requires the confirm action:
        export class ProductEditComponent {
            ...
            canDeactivate() {
                // condition verify form data is changed and not save
                if(condition) {
                    return confirm('Do you want to discard this change?');
                }
                return true;
            }
        }


----------------------------------------------------------------------------------------------------
    Resolving Dynamic Data with the Resolve
----------------------------------------------------------------------------------------------------
+ Resolve guard pre-fetch data from BE for the route's associated component before activating the
route.

+ Create new resolver as *.resolver.ts:
    interface Product {
        id: number;
        name: string;
    }
    export class FetchedDataResolver implements Resolve<FetchedDataTypes> {
        constructor(private fetchedDataService: FetchedDataService) {}
        resolve(currentRoute: ActivatedRouteSnapshot,
                currentState: RouterStateSnapshot): Observable<Product[]> | Promise<Product[]> | Product[] {
            return this.fetchedDataService.getData();
        }
    }

+ To use new service guard:
    - Register new service to Angular dependency injector (See Services & DI.txt).
    - Add new service into resolve property of the route which needs to pre-fetch data:
        RouterModule.forRoot([
            { path: 'products', component: ProductsComponent, resolve: {fetchedProducts: Product[]} }
        ])
    - The coponent listens to pre-fetched data via OnInit hook:
        @Component({
            selector: 'test-component',
        })
        export class TestComponent implements OnInit {
            private products: Product[];
            constructor (private route: ActivatedRoute) {}
            ngOnInit() {
                this.route.subcribe(
                    (data: Data) => {
                        // fetchedProducts gets in resolve property
                        this.products = data['fetchedProducts'];
                    }
                );
            }
        }
